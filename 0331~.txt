###. Constructor 생성자
	- 기본 생성자 클()
	- 지정 생성자
	 > 생성자 오버로딩



###. 상속
	- 자녀는 부모와 같거나 많음
	- 100% 상속 
	- 상속 키워드 ==> extends
			(flutter)

		- ex) A extends B == A is kinds of B	

	-  부모(기본)/자식(파생) 클래스 = parent(base)/child(derived) class
					super / sub class


##. 객체의 형변환
	
	- 예) super - Parent / sub - Child

	Parent p1 = new Parent();
	Child c1 = new Child();
	Parent p2 = c1;

 	또는, Parent p2 = new Child();

	- 객체의 형변환 : 부모객체 p2 -> 자녀객체 c1을 가리킴 
		// 자녀개체로 취급되므로 자녀클래스 내의 메소드를 사용할 수 있다.

	** Child c2 = new Parent();
		// 자녀 -> 부모로의 형변환은x 암시적형변환도x	// 자료의 형변환의 narrowing casting중 데이터 유실 오류가 뜨는 이유와 동일하다.

	 
###. Overriding

	- 재정의. 
	1) 상속에 있어서 메소드이름이 같아야
	2) 재정의 시 부모와 다르게 표현하는 것 

	- 주로 추상클래스or인터페이스 상속받는 자녀클래스 내부에서 메소드 구현할 때 보임
		- 구현하는 메소드 위에 @Override 라벨 붙임


	예) 
		Parent p1 = new Parent();
		Parent p2 = new Child();
		p1.Car();
		p2.Car();

	- p1은 부모클래스의 메소드 실행. 자녀객체로 형변환된 p2는 자녀클래스의 메소드 실행



###. Interface

	- 클래스는 다중 상속이 불가 
		: java와 그 외 언어에서 객체의 다중상속이 금지됨
	>> interface로 다중 상속 
			** 직렬모양으로 다중상속받는건 허용됨

	예)
	class Temp implements FirstInterface, SecondInterface { ... }

	- 인터페이스 규칙
		- implements 로 연결
		- 선언만 가능하고, 구현은 x 
		- 메소드도 선언만 가능, 인터페이스 객체 내부에서 body구현x , 상속받은 객체에서 body구현
		- 인터페이스는 항상 클래스 객체 상위에 위치한다




###. 추상 클래스 		-- 객체형변환, 다형성클래스

	- 목적: 사용자에게 정보나 숨겨진 사항 등을 보여주기 위해 쓰임. 가독성
		: 다형성Polymorphism 객체 구현에 자주 쓰임

	- 인터페이스와 특징이 비슷함
		- 선언만 가능하고 구현은x
		- 추상메소드는 선언만 가능, 구현불가. 상속 받는 객체쪽에서 구현한다.
	- 일반메소드와 추상메소드를 선언 가능. 일반메소드는 타 객체처럼 자신 내부에서 구현이 가능, 하지만 추상메소드는 public abstract void 메소드명() 처럼 선언하고 구현은 할 수 없음
	- extends 로 연결

	- 객체의 형변환
	예)
	추상클래스 Kwail
		추상 메소드 meokja()
	서브클래스 Sakwa, Bae, Kam ..
		각 클래스마다 meokja의 body가 구현되어있음
	메인 >
		Kwail s1 = new Sakwa();
		s1.meokja();
		Kwail b1 = new Bae();
		b1.meokja();
		Kwail k1 = new Kam();
		k1.meokja();
		>> 부모->자식 형변환과 비슷하게 추상클래스로 가리키는 것이 된다.  
		>> 세 클래스들이 모두 '과일'에 해당한다는 정보가 한 눈에 보여짐
		>> 동일 이름의 메소드로 여러 객체의 정보를 처리함




	
###. 채팅 프로그램

	- win Powershell > java a710_tcpchat.TcpServer 8787 입력 // c\user\user\desktop위치에서..
	22 > java a710_tcpchat.TcpClient 127.0.0.1 8787 // ..


##. 프로그램
	- 메모장 프로그램
	program ; notepad.exe

	- process
	- thread
		- TSS ( 시분할 처리 )

##. Thread
	- java 내장 클래스 Thread
		.. extends Thread 로 스레드객체를 상속받아 사용할 수 있다

	#. thread클래스 생성, 선언
	1) 클래스에 Thread 상속
	2) 인터페이스 Runnable 구현. 클래스상속x, 추상메소드run()구현이 필요하고 객체생성문에서 Thread로 지정
		- 다중상속여부, 효율 등의 문제로 스레드는 보통 2) 로 구현한다	




###. 예외처리
	- try { a } catch { b }
		a; 에러 의심 부분  b; 실행할대처방안
	- throws ..


###. Socket program
	- OSI Open System Interconnection 7-layers



	// 채팅  > java a170_TCPServer .. > 명령인자 > commandline argument

	// String[] args
	// java a170_chat.TCPServer 8976
	// String[] args = new String[2];


###. TCP , UDP
 Transmission Control P / User Diagram P
	TCP		UDP
	신뢰성		빠름
	(일반전화)	(방송,메일)
	


###. 컬렉션
	#. 배열vs컬렉션
		- 배열: 고정길이 (+단일 데이터 타입) , 컬렉션: 가변길이 (+ MultiDataType)
		
	#. 컬렉션 자료구조
	( - 인터페이스 ==> 클래스 )
	- list 	==> 순서o, 중복허용
		- vertor, ArrayList, LinkedList, stack, queue
	- set	==> 순서x, 중복x ; unique한 값을 저장할 때 - 예: 계좌번호
		- HashSet, LinkedHashSet, TreeSet, SortedSet
	- map 	==> key-value 쌍으로 이루어짐. (>순서상관x 키 중복만x) 
		*해싱기법이라 검색, 접근 등에대한 행동의 속도가 빠름
		- HashMap, TreeMap, LinkedHashMap, SortedMap

	#. Wrapper classes
		- Integer, Short 등
		- int aa=100 원시타입 데이터 -> Integer bb=aa 클래스타입  // auto boxing
		<> int cc=bb 클래스 -> 원시타입 // auto unboxing


###. 제네릭 Generic	// 잘 안씀
	- 가변길이배열 , 단일 데이터타입
	- <Integer> << 같은단락이 제네릭에 해당



###. Stack vs Queue
	- 스택	- Stack 클래스 이용
		- 뒤로가기, 자료역순처리, 하노이, 팩토리얼(재귀함수), 
			+ 깊이우선탐색(DFS)
		- 루프, 메소드없이 객체명으로 쉽게 출력이 가능(꺼내는순서x 넣은순서o)
		- push , pop		
		
	- 큐
		- Queue 클래스 사용
		- 선입선출기능
			+ 넓이우선탐색(BFS)
		- 쉽게 출력.."
		- offer , poll

		** 
		Queue<String> q1 = new LinkedList<String>(); // 선언
		>> Collection > Queue > LinkedList 순 관계이기 때문에 형변환됨
















































